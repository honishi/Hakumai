// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dwango/nicolive/chat/data/state.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct Dwango_Nicolive_Chat_Data_NicoliveState: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var statistics: Dwango_Nicolive_Chat_Data_Statistics {
        get {return _storage._statistics ?? Dwango_Nicolive_Chat_Data_Statistics()}
        set {_uniqueStorage()._statistics = newValue}
    }
    /// Returns true if `statistics` has been explicitly set.
    var hasStatistics: Bool {return _storage._statistics != nil}
    /// Clears the value of `statistics`. Subsequent reads from it will return its default value.
    mutating func clearStatistics() {_uniqueStorage()._statistics = nil}

    var enquete: Dwango_Nicolive_Chat_Data_Enquete {
        get {return _storage._enquete ?? Dwango_Nicolive_Chat_Data_Enquete()}
        set {_uniqueStorage()._enquete = newValue}
    }
    /// Returns true if `enquete` has been explicitly set.
    var hasEnquete: Bool {return _storage._enquete != nil}
    /// Clears the value of `enquete`. Subsequent reads from it will return its default value.
    mutating func clearEnquete() {_uniqueStorage()._enquete = nil}

    var moveOrder: Dwango_Nicolive_Chat_Data_MoveOrder {
        get {return _storage._moveOrder ?? Dwango_Nicolive_Chat_Data_MoveOrder()}
        set {_uniqueStorage()._moveOrder = newValue}
    }
    /// Returns true if `moveOrder` has been explicitly set.
    var hasMoveOrder: Bool {return _storage._moveOrder != nil}
    /// Clears the value of `moveOrder`. Subsequent reads from it will return its default value.
    mutating func clearMoveOrder() {_uniqueStorage()._moveOrder = nil}

    var marquee: Dwango_Nicolive_Chat_Data_Marquee {
        get {return _storage._marquee ?? Dwango_Nicolive_Chat_Data_Marquee()}
        set {_uniqueStorage()._marquee = newValue}
    }
    /// Returns true if `marquee` has been explicitly set.
    var hasMarquee: Bool {return _storage._marquee != nil}
    /// Clears the value of `marquee`. Subsequent reads from it will return its default value.
    mutating func clearMarquee() {_uniqueStorage()._marquee = nil}

    var commentLock: Dwango_Nicolive_Chat_Data_CommentLock {
        get {return _storage._commentLock ?? Dwango_Nicolive_Chat_Data_CommentLock()}
        set {_uniqueStorage()._commentLock = newValue}
    }
    /// Returns true if `commentLock` has been explicitly set.
    var hasCommentLock: Bool {return _storage._commentLock != nil}
    /// Clears the value of `commentLock`. Subsequent reads from it will return its default value.
    mutating func clearCommentLock() {_uniqueStorage()._commentLock = nil}

    var commentMode: Dwango_Nicolive_Chat_Data_CommentMode {
        get {return _storage._commentMode ?? Dwango_Nicolive_Chat_Data_CommentMode()}
        set {_uniqueStorage()._commentMode = newValue}
    }
    /// Returns true if `commentMode` has been explicitly set.
    var hasCommentMode: Bool {return _storage._commentMode != nil}
    /// Clears the value of `commentMode`. Subsequent reads from it will return its default value.
    mutating func clearCommentMode() {_uniqueStorage()._commentMode = nil}

    var trialPanel: Dwango_Nicolive_Chat_Data_TrialPanel {
        get {return _storage._trialPanel ?? Dwango_Nicolive_Chat_Data_TrialPanel()}
        set {_uniqueStorage()._trialPanel = newValue}
    }
    /// Returns true if `trialPanel` has been explicitly set.
    var hasTrialPanel: Bool {return _storage._trialPanel != nil}
    /// Clears the value of `trialPanel`. Subsequent reads from it will return its default value.
    mutating func clearTrialPanel() {_uniqueStorage()._trialPanel = nil}

    var programStatus: Dwango_Nicolive_Chat_Data_ProgramStatus {
        get {return _storage._programStatus ?? Dwango_Nicolive_Chat_Data_ProgramStatus()}
        set {_uniqueStorage()._programStatus = newValue}
    }
    /// Returns true if `programStatus` has been explicitly set.
    var hasProgramStatus: Bool {return _storage._programStatus != nil}
    /// Clears the value of `programStatus`. Subsequent reads from it will return its default value.
    mutating func clearProgramStatus() {_uniqueStorage()._programStatus = nil}

    var moderationAnnouncement: Dwango_Nicolive_Chat_Data_Atoms_ModerationAnnouncement {
        get {return _storage._moderationAnnouncement ?? Dwango_Nicolive_Chat_Data_Atoms_ModerationAnnouncement()}
        set {_uniqueStorage()._moderationAnnouncement = newValue}
    }
    /// Returns true if `moderationAnnouncement` has been explicitly set.
    var hasModerationAnnouncement: Bool {return _storage._moderationAnnouncement != nil}
    /// Clears the value of `moderationAnnouncement`. Subsequent reads from it will return its default value.
    mutating func clearModerationAnnouncement() {_uniqueStorage()._moderationAnnouncement = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "dwango.nicolive.chat.data"

extension Dwango_Nicolive_Chat_Data_NicoliveState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".NicoliveState"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "statistics"),
        2: .same(proto: "enquete"),
        3: .standard(proto: "move_order"),
        4: .same(proto: "marquee"),
        5: .standard(proto: "comment_lock"),
        6: .standard(proto: "comment_mode"),
        7: .standard(proto: "trial_panel"),
        9: .standard(proto: "program_status"),
        10: .standard(proto: "moderation_announcement")
    ]

    fileprivate class _StorageClass {
        var _statistics: Dwango_Nicolive_Chat_Data_Statistics?
        var _enquete: Dwango_Nicolive_Chat_Data_Enquete?
        var _moveOrder: Dwango_Nicolive_Chat_Data_MoveOrder?
        var _marquee: Dwango_Nicolive_Chat_Data_Marquee?
        var _commentLock: Dwango_Nicolive_Chat_Data_CommentLock?
        var _commentMode: Dwango_Nicolive_Chat_Data_CommentMode?
        var _trialPanel: Dwango_Nicolive_Chat_Data_TrialPanel?
        var _programStatus: Dwango_Nicolive_Chat_Data_ProgramStatus?
        var _moderationAnnouncement: Dwango_Nicolive_Chat_Data_Atoms_ModerationAnnouncement?

        #if swift(>=5.10)
        // This property is used as the initial default value for new instances of the type.
        // The type itself is protecting the reference to its storage via CoW semantics.
        // This will force a copy to be made of this reference when the first mutation occurs;
        // hence, it is safe to mark this as `nonisolated(unsafe)`.
        static nonisolated(unsafe) let defaultInstance = _StorageClass()
        #else
        static let defaultInstance = _StorageClass()
        #endif

        private init() {}

        init(copying source: _StorageClass) {
            _statistics = source._statistics
            _enquete = source._enquete
            _moveOrder = source._moveOrder
            _marquee = source._marquee
            _commentLock = source._commentLock
            _commentMode = source._commentMode
            _trialPanel = source._trialPanel
            _programStatus = source._programStatus
            _moderationAnnouncement = source._moderationAnnouncement
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch fieldNumber {
                case 1: try { try decoder.decodeSingularMessageField(value: &_storage._statistics) }()
                case 2: try { try decoder.decodeSingularMessageField(value: &_storage._enquete) }()
                case 3: try { try decoder.decodeSingularMessageField(value: &_storage._moveOrder) }()
                case 4: try { try decoder.decodeSingularMessageField(value: &_storage._marquee) }()
                case 5: try { try decoder.decodeSingularMessageField(value: &_storage._commentLock) }()
                case 6: try { try decoder.decodeSingularMessageField(value: &_storage._commentMode) }()
                case 7: try { try decoder.decodeSingularMessageField(value: &_storage._trialPanel) }()
                case 9: try { try decoder.decodeSingularMessageField(value: &_storage._programStatus) }()
                case 10: try { try decoder.decodeSingularMessageField(value: &_storage._moderationAnnouncement) }()
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every if/case branch local when no optimizations
            // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
            // https://github.com/apple/swift-protobuf/issues/1182
            try { if let v = _storage._statistics {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            } }()
            try { if let v = _storage._enquete {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            } }()
            try { if let v = _storage._moveOrder {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            } }()
            try { if let v = _storage._marquee {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            } }()
            try { if let v = _storage._commentLock {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            } }()
            try { if let v = _storage._commentMode {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            } }()
            try { if let v = _storage._trialPanel {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            } }()
            try { if let v = _storage._programStatus {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
            } }()
            try { if let v = _storage._moderationAnnouncement {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            } }()
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func ==(lhs: Dwango_Nicolive_Chat_Data_NicoliveState, rhs: Dwango_Nicolive_Chat_Data_NicoliveState) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._statistics != rhs_storage._statistics {return false}
                if _storage._enquete != rhs_storage._enquete {return false}
                if _storage._moveOrder != rhs_storage._moveOrder {return false}
                if _storage._marquee != rhs_storage._marquee {return false}
                if _storage._commentLock != rhs_storage._commentLock {return false}
                if _storage._commentMode != rhs_storage._commentMode {return false}
                if _storage._trialPanel != rhs_storage._trialPanel {return false}
                if _storage._programStatus != rhs_storage._programStatus {return false}
                if _storage._moderationAnnouncement != rhs_storage._moderationAnnouncement {return false}
                return true
            }
            if !storagesAreEqual {return false}
        }
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
