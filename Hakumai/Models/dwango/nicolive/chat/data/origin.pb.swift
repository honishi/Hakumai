// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dwango/nicolive/chat/data/origin.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct Dwango_Nicolive_Chat_Data_NicoliveOrigin: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var origin: Dwango_Nicolive_Chat_Data_NicoliveOrigin.OneOf_Origin?

    var chat: Dwango_Nicolive_Chat_Data_NicoliveOrigin.Chat {
        get {
            if case .chat(let v)? = origin {return v}
            return Dwango_Nicolive_Chat_Data_NicoliveOrigin.Chat()
        }
        set {origin = .chat(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Origin: Equatable, Sendable {
        case chat(Dwango_Nicolive_Chat_Data_NicoliveOrigin.Chat)

    }

    struct Chat: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var liveID: Int64 = 0

        var unknownFields = SwiftProtobuf.UnknownStorage()
    }

    init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "dwango.nicolive.chat.data"

extension Dwango_Nicolive_Chat_Data_NicoliveOrigin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".NicoliveOrigin"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "chat")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                var v: Dwango_Nicolive_Chat_Data_NicoliveOrigin.Chat?
                var hadOneofValue = false
                if let current = self.origin {
                    hadOneofValue = true
                    if case .chat(let m) = current {v = m}
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v {
                    if hadOneofValue {try decoder.handleConflictingOneOf()}
                    self.origin = .chat(v)
                }
            }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if case .chat(let v)? = self.origin {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func ==(lhs: Dwango_Nicolive_Chat_Data_NicoliveOrigin, rhs: Dwango_Nicolive_Chat_Data_NicoliveOrigin) -> Bool {
        if lhs.origin != rhs.origin {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension Dwango_Nicolive_Chat_Data_NicoliveOrigin.Chat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = Dwango_Nicolive_Chat_Data_NicoliveOrigin.protoMessageName + ".Chat"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "live_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularInt64Field(value: &self.liveID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.liveID != 0 {
            try visitor.visitSingularInt64Field(value: self.liveID, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func ==(lhs: Dwango_Nicolive_Chat_Data_NicoliveOrigin.Chat, rhs: Dwango_Nicolive_Chat_Data_NicoliveOrigin.Chat) -> Bool {
        if lhs.liveID != rhs.liveID {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
