// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dwango/nicolive/chat/data/atoms/moderator.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct Dwango_Nicolive_Chat_Data_Atoms_ModeratorUserInfo: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var userID: Int64 = 0

    var nickname: String {
        get {return _nickname ?? String()}
        set {_nickname = newValue}
    }
    /// Returns true if `nickname` has been explicitly set.
    var hasNickname: Bool {return self._nickname != nil}
    /// Clears the value of `nickname`. Subsequent reads from it will return its default value.
    mutating func clearNickname() {self._nickname = nil}

    var iconURL: String {
        get {return _iconURL ?? String()}
        set {_iconURL = newValue}
    }
    /// Returns true if `iconURL` has been explicitly set.
    var hasIconURL: Bool {return self._iconURL != nil}
    /// Clears the value of `iconURL`. Subsequent reads from it will return its default value.
    mutating func clearIconURL() {self._iconURL = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _nickname: String?
    fileprivate var _iconURL: String?
}

struct Dwango_Nicolive_Chat_Data_Atoms_ModeratorUpdated: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var operation: Dwango_Nicolive_Chat_Data_Atoms_ModeratorUpdated.ModeratorOperation = .add

    var `operator`: Dwango_Nicolive_Chat_Data_Atoms_ModeratorUserInfo {
        get {return _operator ?? Dwango_Nicolive_Chat_Data_Atoms_ModeratorUserInfo()}
        set {_operator = newValue}
    }
    /// Returns true if ``operator`` has been explicitly set.
    var hasOperator: Bool {return self._operator != nil}
    /// Clears the value of ``operator``. Subsequent reads from it will return its default value.
    mutating func clearOperator() {self._operator = nil}

    var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
        set {_updatedAt = newValue}
    }
    /// Returns true if `updatedAt` has been explicitly set.
    var hasUpdatedAt: Bool {return self._updatedAt != nil}
    /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
    mutating func clearUpdatedAt() {self._updatedAt = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum ModeratorOperation: SwiftProtobuf.Enum, Swift.CaseIterable {
        typealias RawValue = Int
        case add // = 0
        case delete // = 1
        case UNRECOGNIZED(Int)

        init() {
            self = .add
        }

        init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .add
            case 1: self = .delete
            default: self = .UNRECOGNIZED(rawValue)
            }
        }

        var rawValue: Int {
            switch self {
            case .add: return 0
            case .delete: return 1
            case .UNRECOGNIZED(let i): return i
            }
        }

        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static let allCases: [Dwango_Nicolive_Chat_Data_Atoms_ModeratorUpdated.ModeratorOperation] = [
            .add,
            .delete
        ]

    }

    init() {}

    fileprivate var _operator: Dwango_Nicolive_Chat_Data_Atoms_ModeratorUserInfo?
    fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp?
}

struct Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var operation: Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated.SSNGOperation = .add

    var ssngID: Int64 = 0

    var `operator`: Dwango_Nicolive_Chat_Data_Atoms_ModeratorUserInfo {
        get {return _operator ?? Dwango_Nicolive_Chat_Data_Atoms_ModeratorUserInfo()}
        set {_operator = newValue}
    }
    /// Returns true if ``operator`` has been explicitly set.
    var hasOperator: Bool {return self._operator != nil}
    /// Clears the value of ``operator``. Subsequent reads from it will return its default value.
    mutating func clearOperator() {self._operator = nil}

    var type: Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated.SSNGType {
        get {return _type ?? .user}
        set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
    mutating func clearType() {self._type = nil}

    var source: String {
        get {return _source ?? String()}
        set {_source = newValue}
    }
    /// Returns true if `source` has been explicitly set.
    var hasSource: Bool {return self._source != nil}
    /// Clears the value of `source`. Subsequent reads from it will return its default value.
    mutating func clearSource() {self._source = nil}

    var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
        set {_updatedAt = newValue}
    }
    /// Returns true if `updatedAt` has been explicitly set.
    var hasUpdatedAt: Bool {return self._updatedAt != nil}
    /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
    mutating func clearUpdatedAt() {self._updatedAt = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum SSNGOperation: SwiftProtobuf.Enum, Swift.CaseIterable {
        typealias RawValue = Int
        case add // = 0
        case delete // = 1
        case UNRECOGNIZED(Int)

        init() {
            self = .add
        }

        init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .add
            case 1: self = .delete
            default: self = .UNRECOGNIZED(rawValue)
            }
        }

        var rawValue: Int {
            switch self {
            case .add: return 0
            case .delete: return 1
            case .UNRECOGNIZED(let i): return i
            }
        }

        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static let allCases: [Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated.SSNGOperation] = [
            .add,
            .delete
        ]

    }

    enum SSNGType: SwiftProtobuf.Enum, Swift.CaseIterable {
        typealias RawValue = Int
        case user // = 0
        case word // = 1
        case command // = 2
        case UNRECOGNIZED(Int)

        init() {
            self = .user
        }

        init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .user
            case 1: self = .word
            case 2: self = .command
            default: self = .UNRECOGNIZED(rawValue)
            }
        }

        var rawValue: Int {
            switch self {
            case .user: return 0
            case .word: return 1
            case .command: return 2
            case .UNRECOGNIZED(let i): return i
            }
        }

        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static let allCases: [Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated.SSNGType] = [
            .user,
            .word,
            .command
        ]

    }

    init() {}

    fileprivate var _operator: Dwango_Nicolive_Chat_Data_Atoms_ModeratorUserInfo?
    fileprivate var _type: Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated.SSNGType?
    fileprivate var _source: String?
    fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp?
}

struct Dwango_Nicolive_Chat_Data_Atoms_ModerationAnnouncement: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var message: String {
        get {return _message ?? String()}
        set {_message = newValue}
    }
    /// Returns true if `message` has been explicitly set.
    var hasMessage: Bool {return self._message != nil}
    /// Clears the value of `message`. Subsequent reads from it will return its default value.
    mutating func clearMessage() {self._message = nil}

    var guidelineItems: [Dwango_Nicolive_Chat_Data_Atoms_ModerationAnnouncement.GuidelineItem] = []

    var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
        set {_updatedAt = newValue}
    }
    /// Returns true if `updatedAt` has been explicitly set.
    var hasUpdatedAt: Bool {return self._updatedAt != nil}
    /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
    mutating func clearUpdatedAt() {self._updatedAt = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum GuidelineItem: SwiftProtobuf.Enum, Swift.CaseIterable {
        typealias RawValue = Int
        case unknown // = 0
        case sexual // = 1
        case spam // = 2
        case slander // = 3
        case personalInformation // = 4
        case UNRECOGNIZED(Int)

        init() {
            self = .unknown
        }

        init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .unknown
            case 1: self = .sexual
            case 2: self = .spam
            case 3: self = .slander
            case 4: self = .personalInformation
            default: self = .UNRECOGNIZED(rawValue)
            }
        }

        var rawValue: Int {
            switch self {
            case .unknown: return 0
            case .sexual: return 1
            case .spam: return 2
            case .slander: return 3
            case .personalInformation: return 4
            case .UNRECOGNIZED(let i): return i
            }
        }

        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static let allCases: [Dwango_Nicolive_Chat_Data_Atoms_ModerationAnnouncement.GuidelineItem] = [
            .unknown,
            .sexual,
            .spam,
            .slander,
            .personalInformation
        ]

    }

    init() {}

    fileprivate var _message: String?
    fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp?
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "dwango.nicolive.chat.data.atoms"

extension Dwango_Nicolive_Chat_Data_Atoms_ModeratorUserInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ModeratorUserInfo"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "user_id"),
        2: .same(proto: "nickname"),
        3: .same(proto: "iconUrl")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self._nickname) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self._iconURL) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if self.userID != 0 {
            try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 1)
        }
        try { if let v = self._nickname {
            try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._iconURL {
            try visitor.visitSingularStringField(value: v, fieldNumber: 3)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func ==(lhs: Dwango_Nicolive_Chat_Data_Atoms_ModeratorUserInfo, rhs: Dwango_Nicolive_Chat_Data_Atoms_ModeratorUserInfo) -> Bool {
        if lhs.userID != rhs.userID {return false}
        if lhs._nickname != rhs._nickname {return false}
        if lhs._iconURL != rhs._iconURL {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension Dwango_Nicolive_Chat_Data_Atoms_ModeratorUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ModeratorUpdated"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "operation"),
        2: .same(proto: "operator"),
        3: .same(proto: "updatedAt")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self.operation) }()
            case 2: try { try decoder.decodeSingularMessageField(value: &self._operator) }()
            case 3: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if self.operation != .add {
            try visitor.visitSingularEnumField(value: self.operation, fieldNumber: 1)
        }
        try { if let v = self._operator {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._updatedAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func ==(lhs: Dwango_Nicolive_Chat_Data_Atoms_ModeratorUpdated, rhs: Dwango_Nicolive_Chat_Data_Atoms_ModeratorUpdated) -> Bool {
        if lhs.operation != rhs.operation {return false}
        if lhs._operator != rhs._operator {return false}
        if lhs._updatedAt != rhs._updatedAt {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension Dwango_Nicolive_Chat_Data_Atoms_ModeratorUpdated.ModeratorOperation: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "ADD"),
        1: .same(proto: "DELETE")
    ]
}

extension Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SSNGUpdated"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "operation"),
        2: .standard(proto: "ssng_id"),
        3: .same(proto: "operator"),
        4: .same(proto: "type"),
        5: .same(proto: "source"),
        6: .same(proto: "updatedAt")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self.operation) }()
            case 2: try { try decoder.decodeSingularInt64Field(value: &self.ssngID) }()
            case 3: try { try decoder.decodeSingularMessageField(value: &self._operator) }()
            case 4: try { try decoder.decodeSingularEnumField(value: &self._type) }()
            case 5: try { try decoder.decodeSingularStringField(value: &self._source) }()
            case 6: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if self.operation != .add {
            try visitor.visitSingularEnumField(value: self.operation, fieldNumber: 1)
        }
        if self.ssngID != 0 {
            try visitor.visitSingularInt64Field(value: self.ssngID, fieldNumber: 2)
        }
        try { if let v = self._operator {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        } }()
        try { if let v = self._type {
            try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
        } }()
        try { if let v = self._source {
            try visitor.visitSingularStringField(value: v, fieldNumber: 5)
        } }()
        try { if let v = self._updatedAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func ==(lhs: Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated, rhs: Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated) -> Bool {
        if lhs.operation != rhs.operation {return false}
        if lhs.ssngID != rhs.ssngID {return false}
        if lhs._operator != rhs._operator {return false}
        if lhs._type != rhs._type {return false}
        if lhs._source != rhs._source {return false}
        if lhs._updatedAt != rhs._updatedAt {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated.SSNGOperation: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "ADD"),
        1: .same(proto: "DELETE")
    ]
}

extension Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated.SSNGType: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "USER"),
        1: .same(proto: "WORD"),
        2: .same(proto: "COMMAND")
    ]
}

extension Dwango_Nicolive_Chat_Data_Atoms_ModerationAnnouncement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ModerationAnnouncement"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "message"),
        2: .same(proto: "guidelineItems"),
        3: .same(proto: "updatedAt")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self._message) }()
            case 2: try { try decoder.decodeRepeatedEnumField(value: &self.guidelineItems) }()
            case 3: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._message {
            try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        } }()
        if !self.guidelineItems.isEmpty {
            try visitor.visitPackedEnumField(value: self.guidelineItems, fieldNumber: 2)
        }
        try { if let v = self._updatedAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func ==(lhs: Dwango_Nicolive_Chat_Data_Atoms_ModerationAnnouncement, rhs: Dwango_Nicolive_Chat_Data_Atoms_ModerationAnnouncement) -> Bool {
        if lhs._message != rhs._message {return false}
        if lhs.guidelineItems != rhs.guidelineItems {return false}
        if lhs._updatedAt != rhs._updatedAt {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension Dwango_Nicolive_Chat_Data_Atoms_ModerationAnnouncement.GuidelineItem: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "UNKNOWN"),
        1: .same(proto: "SEXUAL"),
        2: .same(proto: "SPAM"),
        3: .same(proto: "SLANDER"),
        4: .same(proto: "PERSONAL_INFORMATION")
    ]
}
