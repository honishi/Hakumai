// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dwango/nicolive/chat/data/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct Dwango_Nicolive_Chat_Data_NicoliveMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var data: Dwango_Nicolive_Chat_Data_NicoliveMessage.OneOf_Data?

    var chat: Dwango_Nicolive_Chat_Data_Chat {
        get {
            if case .chat(let v)? = data {return v}
            return Dwango_Nicolive_Chat_Data_Chat()
        }
        set {data = .chat(newValue)}
    }

    var simpleNotification: Dwango_Nicolive_Chat_Data_SimpleNotification {
        get {
            if case .simpleNotification(let v)? = data {return v}
            return Dwango_Nicolive_Chat_Data_SimpleNotification()
        }
        set {data = .simpleNotification(newValue)}
    }

    var gift: Dwango_Nicolive_Chat_Data_Gift {
        get {
            if case .gift(let v)? = data {return v}
            return Dwango_Nicolive_Chat_Data_Gift()
        }
        set {data = .gift(newValue)}
    }

    var nicoad: Dwango_Nicolive_Chat_Data_Nicoad {
        get {
            if case .nicoad(let v)? = data {return v}
            return Dwango_Nicolive_Chat_Data_Nicoad()
        }
        set {data = .nicoad(newValue)}
    }

    var gameUpdate: Dwango_Nicolive_Chat_Data_GameUpdate {
        get {
            if case .gameUpdate(let v)? = data {return v}
            return Dwango_Nicolive_Chat_Data_GameUpdate()
        }
        set {data = .gameUpdate(newValue)}
    }

    var tagUpdated: Dwango_Nicolive_Chat_Data_TagUpdated {
        get {
            if case .tagUpdated(let v)? = data {return v}
            return Dwango_Nicolive_Chat_Data_TagUpdated()
        }
        set {data = .tagUpdated(newValue)}
    }

    var moderatorUpdated: Dwango_Nicolive_Chat_Data_Atoms_ModeratorUpdated {
        get {
            if case .moderatorUpdated(let v)? = data {return v}
            return Dwango_Nicolive_Chat_Data_Atoms_ModeratorUpdated()
        }
        set {data = .moderatorUpdated(newValue)}
    }

    var ssngUpdated: Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated {
        get {
            if case .ssngUpdated(let v)? = data {return v}
            return Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated()
        }
        set {data = .ssngUpdated(newValue)}
    }

    var overflowedChat: Dwango_Nicolive_Chat_Data_Chat {
        get {
            if case .overflowedChat(let v)? = data {return v}
            return Dwango_Nicolive_Chat_Data_Chat()
        }
        set {data = .overflowedChat(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Data: Equatable, Sendable {
        case chat(Dwango_Nicolive_Chat_Data_Chat)
        case simpleNotification(Dwango_Nicolive_Chat_Data_SimpleNotification)
        case gift(Dwango_Nicolive_Chat_Data_Gift)
        case nicoad(Dwango_Nicolive_Chat_Data_Nicoad)
        case gameUpdate(Dwango_Nicolive_Chat_Data_GameUpdate)
        case tagUpdated(Dwango_Nicolive_Chat_Data_TagUpdated)
        case moderatorUpdated(Dwango_Nicolive_Chat_Data_Atoms_ModeratorUpdated)
        case ssngUpdated(Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated)
        case overflowedChat(Dwango_Nicolive_Chat_Data_Chat)

    }

    init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "dwango.nicolive.chat.data"

extension Dwango_Nicolive_Chat_Data_NicoliveMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".NicoliveMessage"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "chat"),
        7: .standard(proto: "simple_notification"),
        8: .same(proto: "gift"),
        9: .same(proto: "nicoad"),
        13: .standard(proto: "game_update"),
        17: .standard(proto: "tag_updated"),
        18: .standard(proto: "moderator_updated"),
        19: .standard(proto: "ssng_updated"),
        20: .standard(proto: "overflowed_chat")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                var v: Dwango_Nicolive_Chat_Data_Chat?
                var hadOneofValue = false
                if let current = self.data {
                    hadOneofValue = true
                    if case .chat(let m) = current {v = m}
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v {
                    if hadOneofValue {try decoder.handleConflictingOneOf()}
                    self.data = .chat(v)
                }
            }()
            case 7: try {
                var v: Dwango_Nicolive_Chat_Data_SimpleNotification?
                var hadOneofValue = false
                if let current = self.data {
                    hadOneofValue = true
                    if case .simpleNotification(let m) = current {v = m}
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v {
                    if hadOneofValue {try decoder.handleConflictingOneOf()}
                    self.data = .simpleNotification(v)
                }
            }()
            case 8: try {
                var v: Dwango_Nicolive_Chat_Data_Gift?
                var hadOneofValue = false
                if let current = self.data {
                    hadOneofValue = true
                    if case .gift(let m) = current {v = m}
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v {
                    if hadOneofValue {try decoder.handleConflictingOneOf()}
                    self.data = .gift(v)
                }
            }()
            case 9: try {
                var v: Dwango_Nicolive_Chat_Data_Nicoad?
                var hadOneofValue = false
                if let current = self.data {
                    hadOneofValue = true
                    if case .nicoad(let m) = current {v = m}
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v {
                    if hadOneofValue {try decoder.handleConflictingOneOf()}
                    self.data = .nicoad(v)
                }
            }()
            case 13: try {
                var v: Dwango_Nicolive_Chat_Data_GameUpdate?
                var hadOneofValue = false
                if let current = self.data {
                    hadOneofValue = true
                    if case .gameUpdate(let m) = current {v = m}
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v {
                    if hadOneofValue {try decoder.handleConflictingOneOf()}
                    self.data = .gameUpdate(v)
                }
            }()
            case 17: try {
                var v: Dwango_Nicolive_Chat_Data_TagUpdated?
                var hadOneofValue = false
                if let current = self.data {
                    hadOneofValue = true
                    if case .tagUpdated(let m) = current {v = m}
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v {
                    if hadOneofValue {try decoder.handleConflictingOneOf()}
                    self.data = .tagUpdated(v)
                }
            }()
            case 18: try {
                var v: Dwango_Nicolive_Chat_Data_Atoms_ModeratorUpdated?
                var hadOneofValue = false
                if let current = self.data {
                    hadOneofValue = true
                    if case .moderatorUpdated(let m) = current {v = m}
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v {
                    if hadOneofValue {try decoder.handleConflictingOneOf()}
                    self.data = .moderatorUpdated(v)
                }
            }()
            case 19: try {
                var v: Dwango_Nicolive_Chat_Data_Atoms_SSNGUpdated?
                var hadOneofValue = false
                if let current = self.data {
                    hadOneofValue = true
                    if case .ssngUpdated(let m) = current {v = m}
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v {
                    if hadOneofValue {try decoder.handleConflictingOneOf()}
                    self.data = .ssngUpdated(v)
                }
            }()
            case 20: try {
                var v: Dwango_Nicolive_Chat_Data_Chat?
                var hadOneofValue = false
                if let current = self.data {
                    hadOneofValue = true
                    if case .overflowedChat(let m) = current {v = m}
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v {
                    if hadOneofValue {try decoder.handleConflictingOneOf()}
                    self.data = .overflowedChat(v)
                }
            }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        switch self.data {
        case .chat?: try {
            guard case .chat(let v)? = self.data else { preconditionFailure() }
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }()
        case .simpleNotification?: try {
            guard case .simpleNotification(let v)? = self.data else { preconditionFailure() }
            try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
        }()
        case .gift?: try {
            guard case .gift(let v)? = self.data else { preconditionFailure() }
            try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
        }()
        case .nicoad?: try {
            guard case .nicoad(let v)? = self.data else { preconditionFailure() }
            try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
        }()
        case .gameUpdate?: try {
            guard case .gameUpdate(let v)? = self.data else { preconditionFailure() }
            try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
        }()
        case .tagUpdated?: try {
            guard case .tagUpdated(let v)? = self.data else { preconditionFailure() }
            try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
        }()
        case .moderatorUpdated?: try {
            guard case .moderatorUpdated(let v)? = self.data else { preconditionFailure() }
            try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
        }()
        case .ssngUpdated?: try {
            guard case .ssngUpdated(let v)? = self.data else { preconditionFailure() }
            try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
        }()
        case .overflowedChat?: try {
            guard case .overflowedChat(let v)? = self.data else { preconditionFailure() }
            try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
        }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func ==(lhs: Dwango_Nicolive_Chat_Data_NicoliveMessage, rhs: Dwango_Nicolive_Chat_Data_NicoliveMessage) -> Bool {
        if lhs.data != rhs.data {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
